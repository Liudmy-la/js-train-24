console.log("Завдання: 3 ==============================");

// Створюємо функцію task3, в якій буде виконуватися завдання
function task3() {
  // Створюємо функцію promise1, яка створює і повертає новий проміс
	let promise1 = new Promise((res, rej) => {
		setTimeout(res, 1000, `Проміс 1 виконано`)
	})
  // Метод new Promise приймає в якості параметра функцію (executor), яка має два параметри: resolve і reject.
  // Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 1 секунду
  // Викликаємо resolve з рядком 'Проміс 1 виконано', що означає успішне вирішення проміса

  // Створюємо функцію promise2, яка створює і повертає новий проміс, який відхиляється
	let promise2 = new Promise((res, rej) => {
		setTimeout(rej, 2000, `Проміс 2 відхилено`)
	})
  // Використовуємо setTimeout для імітації асинхронної операції, яка не вдається і відхиляє проміс через 2 секунди
  // Викликаємо reject з рядком 'Проміс 2 відхилено', що означає відхилення проміса

  // Використовуємо Promise.allSettled який приймає масив промісів і повертає новий проміс, який вирішується, коли всі проміси вирішено або відхилено
  // Він повертає масив об'єктів, кожний з яких відображає стан кожного проміса
	Promise.allSettled([promise1, promise2])
  // Функція then викликається, коли проміс вирішено
	.then((results) => results.forEach((result, key) => console.log(`Проміс ${key + 1}:`, result.status)))
  // Вона приймає результати промісів і обробляє їх
  // Для кожного результату виводимо статус проміса
  // Функція finally викликається після того, як проміс вирішено або відхилено
	.finally(() => console.log(`Завдання 3 завершено`))
  // Вона використовується для виконання дій, які повинні виконуватися незалежно від того, чи було проміс вирішено чи відхилено
  // В нашому випадку ми просто виводимо повідомлення, "Завдання 3 завершено"
}

// Викликаємо функцію task3
task3();
